package com.traiana.tquickfix.builder;

import java.util.HashMap;
import java.util.Map;

/**
 * Created with IntelliJ IDEA.
 * User: EvgenyK
 * Date: 10/30/14
 * Time: 2:43 PM
 * Generates QF Component class file.
 */
public class QFMessageMapperBuilder {
    private static final StringBuilder PUT_STATEMENTS = new StringBuilder(16384);
    private static final String PUT_TEMPLATE = "\t\t\tMESSAGE_TYPE_TO_PARSE_METHOD.put(\"%s\", %s.class.getMethod(\"parse\", List.class, MutableInt.class, QFBuilderConfig.class));%n";
    private static final String TEMPLATE_MESSAGE_MAPPER = "package com.traiana.tquickfix.qf.$VER;\n" +
            "\n" +
            "import com.traiana.tquickfix.MessageMapper;\n" +
            "import com.traiana.tquickfix.builder.QFBuilderConfig;\n" +
            "import com.traiana.tquickfix.qf.$VER.message.*;\n" +
            "\n" +
            "import org.apache.commons.lang3.mutable.MutableInt;\n" +
            "\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.HashMap;\n" +
            "import java.util.List;\n" +
            "import java.util.Map;\n" +
            "\n" +
            "/**\n" +
            " * Autogenerated utility class that maps QF message type to QF message's \"parse\" method.\n" +
            " */\n" +
            "public class QFMessageMapper implements MessageMapper {\n" +
            "\tprivate static final QFMessageMapper INSTANCE = new QFMessageMapper();\n" +
            "\tprivate static final Map<String, Method> MESSAGE_TYPE_TO_PARSE_METHOD = new HashMap<String, Method>();\n" +
            "\n" +
            "\tstatic {\n" +
            "\t\ttry {\n" +
            "$MESSAGE_TYPE_TO_PARSE_METHOD" +
            "\t\t} catch(NoSuchMethodException e) {\n" +
            "\t\t\te.printStackTrace();\n" +
            "\t\t}\n" +
            "\t}\n" +
            "\n" +
            "\tpublic static QFMessageMapper getInstance() {\n" +
            "\t\treturn INSTANCE;\n" +
            "\t}\n" +
            "\n" +
            "\tpublic Method getMessageByType(String msgType) {\n" +
            "\t\treturn MESSAGE_TYPE_TO_PARSE_METHOD.get(msgType);\n" +
            "\t}\n" +
            "}";



    private static final Map<CharSequence, CharSequence> VERSION_TO_BEGIN_STRING_VALUE = new HashMap<CharSequence, CharSequence>(10);
    static {
        VERSION_TO_BEGIN_STRING_VALUE.put("vfixt11", "FIXT.1.1");
        VERSION_TO_BEGIN_STRING_VALUE.put("v50sp2", "FIX.5.0SP2");
        VERSION_TO_BEGIN_STRING_VALUE.put("v50sp1", "FIX.5.0SP1");
        VERSION_TO_BEGIN_STRING_VALUE.put("v50", "FIX.5.0");
        VERSION_TO_BEGIN_STRING_VALUE.put("v44", "FIX.4.4");
        VERSION_TO_BEGIN_STRING_VALUE.put("v40", "FIX.4.0");
    }
    private static final String TEMPLATE_QF_MESSAGE = "package com.traiana.tquickfix.qf.$VER.message;\n" +
            "\n" +
            "import com.traiana.tquickfix.blocks.QFCommonMessage;\n" +
            "import com.traiana.tquickfix.blocks.QFField;\n" +
            "import com.traiana.tquickfix.builder.QFBuilderConfig;\n" +
            "import com.traiana.tquickfix.qf.$VER.component.StandardHeaderComponent;\n" +
            "import com.traiana.tquickfix.qf.$VER.component.StandardTrailerComponent;\n" +
            "import com.traiana.tquickfix.qf.$VER.field.BeginString;\n" +
            "import com.traiana.tquickfix.qf.$VER.field.CheckSum;\n" +
            "import com.traiana.tquickfix.qf.$VER.field.MsgType;\n" +
            "\n" +
            "/**\n" +
            " * Abstract presentation of FIX message element.\n" +
            " */\n" +
            "public abstract class QFMessage extends QFCommonMessage {\n" +
            "\tprotected StandardHeaderComponent standardHeader;\n" +
            "\tprotected StandardTrailerComponent standardTrailer;\n" +
            "\n" +
            "\tprotected QFMessage(String name, String type) {\n" +
            "\t\tthis(name, type, false, null);\n" +
            "\t}\n" +
            "    protected QFMessage(String name, String type, QFBuilderConfig config) {\n" +
            "\t\tthis(name, type, false, config);\n" +
            "\t}\n" +
            "\n" +
            "\tprotected QFMessage(String name, String type, boolean createHeaderTrailer) {\n" +
            "\t\tthis(name, type, createHeaderTrailer, null);\n" +
            "\t}\n" +
            "\n" +
            "\tprotected QFMessage(String name, String type, boolean createHeaderTrailer, QFBuilderConfig config) {\n" +
            "\t\tsuper(name, type, config);\n" +
            "\n" +
            "\t\tif(createHeaderTrailer) {\n" +
            "\t\t\tstandardHeader = new StandardHeaderComponent(config);\n" +
            "\t\t\tstandardHeader.setBeginString(BeginString.getInstance(\"$BEGIN_STRING_VALUE\"));\n" +
            "\t\t\tstandardHeader.setMsgType(MsgType.getInstance(type, QFField.Validation.FULL));\n" +
            "\n" +
            "\t\t\tstandardTrailer = new StandardTrailerComponent(config);\n" +
            "\t\t\tstandardTrailer.setCheckSum(CheckSum.getInstance(\"000\"));\n" +
            "\t\t}\n" +
            "\t}\n" +
            "\n" +
            "\tpublic StandardHeaderComponent getStandardHeaderComponent() {\n" +
            "\t\treturn standardHeader;\n" +
            "\t}\n" +
            "\n" +
            "\tpublic void setStandardHeaderComponent(StandardHeaderComponent header) {\n" +
            "\t\tthis.standardHeader = header;\n" +
            "\t}\n" +
            "\n" +
            "\tpublic StandardTrailerComponent getStandardTrailerComponent() {\n" +
            "\t\treturn standardTrailer;\n" +
            "\t}\n" +
            "\n" +
            "\tpublic void setStandardTrailerComponent(StandardTrailerComponent trailer) {\n" +
            "\t\tthis.standardTrailer = trailer;\n" +
            "\t}\n" +
            "}";

    public static void addMessageMapping(String msgName, String msgType) {
        PUT_STATEMENTS.append(String.format(PUT_TEMPLATE, msgType, msgName+"Message"));
    }

    public static void clearMessageMapping() {
        PUT_STATEMENTS.setLength(0);
    }

    public static String buildTypeToMessageMapping() {
        return TEMPLATE_MESSAGE_MAPPER.replace("$VER", QFBuilder.qfVersion).replace("$MESSAGE_TYPE_TO_PARSE_METHOD", PUT_STATEMENTS);
    }



    public static String buildQFMessage(CharSequence qfVersion) {
        return TEMPLATE_QF_MESSAGE.replace("$VER", QFBuilder.qfVersion).replace("$MESSAGE_TYPE_TO_PARSE_METHOD", PUT_STATEMENTS).replace("$BEGIN_STRING_VALUE", VERSION_TO_BEGIN_STRING_VALUE.get(qfVersion));
    }
}